<?php

namespace AppBundle\Repository;
use Doctrine\ORM\NoResultException;
use AppBundle\Entity\Campagne;
/**
 * LigneRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LigneRepository extends \Doctrine\ORM\EntityRepository
{


   public function countAndCashByWeek(Campagne $campagne=null, $startDate=null, $endDate=null,$ville=null){
        $qb = $this->createQueryBuilder('l')
        ->join('l.commende', 'c')
        ->join('c.pointVente','pv')
        ->join('pv.user','u')
        ->join('l.produit', 'p')
         ->where('p.campagne=:campagne')
         ->setParameter('campagne',$campagne);
            if($ville!=null){
           $qb->andWhere('u.ville=:ville')
          ->setParameter('ville', $ville);
          }
         if($startDate!=null){
           $qb->andWhere('c.date is null or c.date>=:startDate')->setParameter('startDate', new \DateTime($startDate));
          }
          if($endDate!=null){
           $qb->andWhere('c.date is null or c.date<=:endDate')->setParameter('endDate',new \DateTime($endDate));
          } 
   
       $qb->addOrderBy('c.week','asc')
       ->select('c.weekText')
       ->addSelect('sum(l.quantite) as nombre')
       ->addGroupBy('c.week')
       ->addGroupBy('c.weekText');
         return $qb->getQuery()->getArrayResult();  
  }

   public function countAndCashByMonth(Campagne $campagne=null, $startDate=null, $endDate=null,$ville=null){
        $qb = $this->createQueryBuilder('l')
        ->join('l.commende', 'c')
        ->join('l.produit', 'p')
        ->join('c.pointVente','pv')
        ->join('pv.user','u')
        ->where('p.campagne=:campagne')
        ->setParameter('campagne',$campagne);
        if($ville!=null){
           $qb->andWhere('u.ville=:ville')
          ->setParameter('ville', $ville);
          }
         if($startDate!=null){
           $qb->andWhere('c.date is null or c.date>=:startDate')->setParameter('startDate', new \DateTime($startDate));
          }
          if($endDate!=null){
           $qb->andWhere('c.date is null or c.date<=:endDate')->setParameter('endDate',new \DateTime($endDate));
          } 
   
       $qb->addOrderBy('c.monthNumber','asc')
       ->select('c.month')
       ->addSelect('sum(l.quantite) as nombre')
        ->addGroupBy('c.monthNumber')
       ->addGroupBy('c.month');
         return $qb->getQuery()->getArrayResult();  
  }



  public function detailVente($pointVente,$produit, $startDate=null, $endDate=null){
        $qb = $this->createQueryBuilder('l')
        ->join('l.commende', 'c')
        ->join('l.produit', 'p') 
        ->where('c.pointVente=:pointVente')->setParameter('pointVente',$pointVente)
        ->andWhere('l.produit=:produit')->setParameter('produit',$produit);
          if($startDate!=null){
           $qb->andWhere('c.date is null or c.date>=:startDate')->setParameter('startDate', new \DateTime($startDate));
          }
          if($endDate!=null){
           $qb->andWhere('c.date is null or c.date<=:endDate')->setParameter('endDate',new \DateTime($endDate));
          } 
        $qb//->addOrderBy('p.nom','asc')
        ->select('sum(l.stock) as stock')
        ->addSelect('sum(l.stockFinal) as stockFinal')
        ->addSelect('sum(l.quantite)as variante')
         ->addSelect('sum(l.gratuite)as gratuite')
         ->addSelect('count(l.frigo)as frigo')
         ->addSelect('count(l.affiche) as affiche')
         ->addSelect('count(l.lineaire) as lineaire')
         ->addSelect('count(l.autre) as autre')
         ->addSelect('sum(l.invalide) as invalide')
         ->addSelect('max(l.mecanisme) as mecanisme')
         ->addSelect('max(l.nombreRessources) as nombreRessources')
         ->addSelect('max(l.price) as price');
        //->addGroupBy('p.nom');
         return $qb->getQuery()->getArrayResult(); 
  }

   public function detailVisibilitePromoPrice(Campagne $campagne=null, $startDate=null, $endDate=null,$ville=null){
        $qb = $this->createQueryBuilder('l')
        ->join('l.commende', 'c')
        ->join('c.pointVente', 'pv')
        ->join('pv.user','u')
        ->join('l.produit', 'p')
        ->where('pv.campagne=:campagne')
        ->setParameter('campagne',$campagne)
        ->andWhere('p.type<>:type')
        ->setParameter('type', 'lot');
          if($ville!=null){
           $qb->andWhere('u.ville=:ville')
          ->setParameter('ville', $ville);
          }
          if($startDate!=null){
           $qb->andWhere('c.date is null or c.date>=:startDate')->setParameter('startDate', new \DateTime($startDate));
          }
          if($endDate!=null){
           $qb->andWhere('c.date is null or c.date<=:endDate')->setParameter('endDate',new \DateTime($endDate));
          } 
        $qb
         ->select('p.nom')
         ->addSelect('p.type')
         ->addSelect('count(DISTINCT pv.id) as nombre')
         ->addSelect('count(l.frigo) as frigo')
         ->addSelect('count(l.affiche) as affiche')
         ->addSelect('count(l.lineaire) as lineaire')
         ->addSelect('count(l.autre) as autre')
         ->addSelect('sum(l.invalide) as invalide')
         ->addSelect('max(l.mecanisme) as mecanisme')
         ->addSelect('count(l.nombreRessources) as nombreRessources')
         ->addSelect('max(l.price) as price') 
         ->addGroupBy('p.nom')
         ->addGroupBy('p.type');
         return $qb->getQuery()->getArrayResult(); 
  } 

}
